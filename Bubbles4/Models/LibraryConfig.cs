using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Text.Json.Serialization;
using DynamicData;

namespace Bubbles4.Models;
using System.Text.Json;
public class LibraryConfig
{
    public string Path { get; set; }
    public enum FitTypes {Best, Width, Height, Stock }
    public enum ScrollActions { TurnPage, Scroll }
    public enum LookAndFeels {Viewer, Reader };
    //library view params
    public bool Recursive { get; set; } = true; 
    public LookAndFeels LookAndFeel { get; set; } = LookAndFeels.Viewer;
    //Page viewer params
    public FitTypes Fit {
        get
        {
            if (LookAndFeel == LookAndFeels.Viewer) return FitTypes.Best;
            else return FitTypes.Width;
        }
    }

    public ScrollActions ScrollAction
    {
        get
        {
            if (LookAndFeel == LookAndFeels.Viewer) return ScrollActions.TurnPage;
            else return ScrollActions.Scroll;
        }
    } 
    public bool UseIVPs { get; set; } = true;
    public bool AnimateIVPs { get; set; } = true;
    public bool CacheLibraryData { get; set; } = false;
    
    public enum NodeSortOptions {Alpha, Created, Modified}
    public enum SortOptions { Path, Natural, Alpha, Created, Modified, Random }
    public enum SortDirection { Ascending, Descending }
    //library sort
    public SortOptions LibrarySortOption { get; set; } = SortOptions.Natural;
    public bool LibrarySortAscending { get; set; } = true;

    //Book Sort
    public SortOptions BookSortOption { get; set; } = SortOptions.Natural;
    public bool BookSortAscending { get; set; } =true;
    
    //Node Sort
    public NodeSortOptions NodeSortOption = NodeSortOptions.Alpha;
    public bool NodeSortAscending { get; set; } = true;
    public bool ShowNavPane => !Recursive;
    public bool AutoBookmarks { get; set; }
    public Dictionary<string, Bookmark> _bookmarks { get; init; } = new ();
    [JsonIgnore]public ObservableCollection<Bookmark> Bookmarks { get; set; } = new();
    public LibraryConfig(string path)
    {
        Path = path;
    }
    public string Serialize()
    {
        return JsonSerializer.Serialize(this);
    }
    
    public static LibraryConfig? Deserialize(string json)
    {
        var config = JsonSerializer.Deserialize<LibraryConfig>(json);
        
        //Remove expired bookmarks
        var weeks = AppStorage.Instance.UserSettings.BookmarkValidity;
        if (config != null)
        {
            if (weeks > 0)
            {
                var validity = TimeSpan.FromDays(7 * weeks);
                foreach( var kv in config._bookmarks.Where(bm=>bm.Value.AutoGenerated).ToList() )
                    if(kv.Value.Created -DateTime.Now > validity)
                        config.RemoveBookmark(kv.Key);    
            }
            config.Bookmarks.Clear();
            config.Bookmarks.AddRange(config._bookmarks.Values); 
        }
        return config;
    }

    public void AddOrUpdateBookmark(Bookmark bookmark)
    {
        _bookmarks[bookmark.BookPath] = bookmark;
        Bookmarks.Clear();
        Bookmarks.AddRange(_bookmarks.Values);
        var json = Serialize();
        AppStorage.Instance.AddOrUpdate(Path, json);
        AppStorage.Instance.Save();
    }

    public void RemoveBookmark(string bookPath)
    {
        _bookmarks.Remove(bookPath);
        Bookmarks.Clear();
        Bookmarks.AddRange(_bookmarks.Values); 
        AppStorage.Instance.AddOrUpdate(Path, Serialize());
        AppStorage.Instance.Save();
    }

    public Bookmark? GetBookmark(string bookPath)
    {
        _bookmarks.TryGetValue(bookPath, out var bookmark);
        return bookmark;
    }
}